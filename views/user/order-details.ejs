<%-include("../../views/partials/user/header") %>
<style>
  :root {
    --primary-color: #3182ce;
    --success-color: #38a169;
    --warning-color: #d69e2e;
    --danger-color: #e53e3e;
    --background-color: #f7fafc;
    --card-background: #ffffff;
    --text-primary: #2d3748;
    --text-secondary: #718096;
    --border-color: #e2e8f0;
    --spacing-unit: 1rem;
  }

  body {
    background-color: var(--background-color);
    color: var(--text-primary);
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
      Ubuntu, Cantarell, sans-serif;
    line-height: 1.5;
    margin: 0;
    padding: 0;
  }

  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .breadcrumb-option {
    background-color: #f3f2ee;
    padding: 20px 0;
  }

  .breadcrumb__text h4 {
    color: #111111;
    font-weight: 700;
    margin-bottom: 8px;
    font-size: 24px;
  }

  .breadcrumb__links a {
    font-size: 14px;
    color: #111111;
    margin-right: 18px;
    display: inline-block;
    position: relative;
    text-decoration: none;
  }

  .breadcrumb__links span {
    font-size: 14px;
    color: #b7b7b7;
    display: inline-block;
  }

  .breadcrumb__links a:after {
    position: absolute;
    right: -12px;
    top: 0;
    content: "/";
    color: #888888;
  }

  .order-card {
    background: var(--card-background);
    border-radius: 1rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -1px rgba(0, 0, 0, 0.06);
    margin-bottom: 2rem;
    overflow: hidden;
  }

  .order-header {
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .order-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
  }

  .status-badge {
    padding: 0.5rem 1rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    font-weight: 500;
    text-transform: uppercase;
  }

  .status-pending {
    background-color: #fef3c7;
    color: #92400e;
  }
  .status-processing {
    background-color: #dbeafe;
    color: #1e40af;
  }
  .status-shipped {
    background-color: #e0e7ff;
    color: #3730a3;
  }
  .status-delivered {
    background-color: #dcfce7;
    color: #166534;
  }
  .status-cancelled {
    background-color: #fee2e2;
    color: #991b1b;
  }
  .status-return {
    background-color: #fef3c7;
    color: #92400e;
  }
  .status-returned {
    background-color: #fee2e2;
    color: #991b1b;
  }

  .order-meta {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    padding: 1.5rem;
    background-color: #f8fafc;
  }

  .meta-item h4 {
    font-size: 0.875rem;
    color: var(--text-secondary);
    margin: 0 0 0.5rem 0;
  }

  .meta-item p {
    font-size: 1rem;
    font-weight: 500;
    margin: 0;
  }

  .products-list {
    padding: 1.5rem;
  }

  .product-item {
    display: flex;
    flex-direction: row;
    gap: 1.5rem;
    padding: 1.5rem;
    border: 1px solid var(--border-color);
    border-radius: 0.75rem;
    margin-bottom: 1rem;
    transition: transform 0.2s, box-shadow 0.2s;
    position: relative;
    align-items: flex-start;
  }

  .product-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px -8px rgba(0, 0, 0, 0.15);
  }

  .product-item.cancelled {
    opacity: 0.6;
    background-color: #fef2f2;
  }

  .product-image {
    width: 100px;
    height: 100px;
    object-fit: cover;
    border-radius: 0.5rem;
    background-color: #f7fafc;
  }

  .product-details h4 {
    font-size: 1rem;
    font-weight: 600;
    margin: 0 0 0.5rem 0;
  }

  .product-meta {
    font-size: 0.875rem;
    color: var(--text-secondary);
    margin-bottom: 1rem;
  }

  .product-price {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 1rem;
  }

  .item-status {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: uppercase;
    margin-bottom: 1rem;
  }

  .item-actions {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
    text-decoration: none;
    display: inline-block;
    text-align: center;
  }

  .btn-danger {
    background-color: var(--danger-color);
    color: white;
  }

  .btn-danger:hover {
    background-color: #c53030;
    transform: translateY(-1px);
  }

  .btn-warning {
    background-color: var(--warning-color);
    color: white;
  }

  .btn-warning:hover {
    background-color: #b7791f;
    transform: translateY(-1px);
  }

  .btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none !important;
  }

  .return-form {
    margin-top: 1rem;
    padding: 1rem;
    background-color: #f8fafc;
    border-radius: 0.5rem;
    border: 1px solid var(--border-color);
  }

  .return-form textarea {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 0.375rem;
    resize: vertical;
    font-family: inherit;
    font-size: 0.875rem;
  }

  .return-form .btn {
    margin-top: 0.75rem;
  }

  .order-summary {
    padding: 1.5rem;
    border-top: 1px solid var(--border-color);
  }

  .summary-row {
    display: flex;
    justify-content: space-between;
    padding: 0.75rem 0;
    font-size: 0.875rem;
  }

  .summary-row.total {
    font-size: 1.25rem;
    font-weight: 600;
    border-top: 2px solid var(--border-color);
    margin-top: 0.75rem;
    padding-top: 1.25rem;
  }

  .shipping-address {
    padding: 1.5rem;
    background-color: #f8fafc;
    border-radius: 0.75rem;
    margin: 1.5rem;
  }

  .shipping-address h3 {
    font-size: 1.125rem;
    font-weight: 600;
    margin: 0 0 1rem 0;
  }

  .address-details {
    display: grid;
    gap: 0.5rem;
    font-size: 0.875rem;
  }

  .address-details p {
    margin: 0;
  }

  .bulk-actions {
    padding: 1.5rem;
    border-top: 1px solid var(--border-color);
    background-color: #f8fafc;
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  @media (max-width: 768px) {
    .container {
      padding: 1rem;
    }

    .product-item {
      flex-direction: column;
      text-align: center;
      align-items: center;
    }
    .product-details {
      align-items: center;
      text-align: center;
    }

    .product-image {
      margin: 0 auto;
    }

    .product-price {
      text-align: center;
      margin-top: 1rem;
    }

    .order-meta {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .item-actions {
      justify-content: center;
      width: 100%;
    }

    .bulk-actions {
      justify-content: center;
    }
  }
</style>

<section class="breadcrumb-option">
  <div class="container">
    <div class="row">
      <div class="col-lg-12">
        <div class="breadcrumb__text">
          <h4>Order Details</h4>
          <div class="breadcrumb__links">
            <a href="/">Home</a>
            <a href="/orders">My Orders</a>
            <span>Order #<%= order.orderId.slice(0, 6) %></span>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<div class="container">
  <div class="order-card">
    <div class="order-header">
      <h1 class="order-title">Order #<%= order.orderId.slice(0, 6) %></h1>
      <span
        class="status-badge status-<%= order.status.toLowerCase().replace(/\s+/g, '-') %>"
      >
        <%= order.status %>
      </span>
    </div>

    <div class="order-meta">
      <div class="meta-item">
        <h4>Order Date</h4>
        <p>
          <%= order.createdOn.toLocaleDateString('en-US', { year: 'numeric',
          month: 'long', day: 'numeric' }) %>
        </p>
      </div>
      <div class="meta-item">
        <h4>Payment Method</h4>
        <p><%= order.paymentMethod %></p>
      </div>
      <div class="meta-item">
        <h4>Payment Status</h4>
        <p><%= order.status === 'Payment Pending' ? 'Pending' : 'Paid' %></p>
      </div>
    </div>

    <div class="products-list">
      <% order.orderedItems.forEach((item, index) => { %>
      <div
        class="product-item <%= item.status === 'Cancelled' ? 'cancelled' : '' %>"
      >
        <% if (item.product && item.product.productImage &&
        item.product.productImage.length > 0) { %>
        <img
          src="/uploads/re-image/<%= item.product.productImage[0] %>"
          alt="<%= item.product.productName %>"
          class="product-image"
          onerror="this.onerror=null; this.parentElement.innerHTML='<div class=\'product-image\'>No Image</div>'"
        />
        <% } else { %>
        <div class="product-image">No Image</div>
        <% } %>

        <div class="product-details">
          <h4>
            <%= item.product ? item.product.productName : 'Product Unavailable'
            %>
          </h4>
          <div class="product-meta">
            <p>Size: <%= item.size %></p>
            <p>Quantity: <%= item.quantity %></p>
          </div>

          <div
            class="item-status status-<%= item.status.toLowerCase().replace(/\s+/g, '-') %>"
          >
            <%= item.status %>
          </div>

          <div class="product-price">â‚¹<%= item.price.toFixed(2) %></div>

          <!-- Individual Item Actions -->
          <div class="item-actions">
            <% if (item.status === 'Delivered') { %>
            <button
              class="btn btn-warning"
              onclick="showReturnForm('<%= order._id %>', '<%= item._id %>')"
            >
              Return Item
            </button>
            <% } else if (item.status !== 'Cancelled' && item.status !==
            'Returned' && item.status !== 'Return Pending') { %>
            <button
              class="btn btn-danger"
              onclick="confirmCancelItem('<%= order._id %>', '<%= item._id %>')"
            >
              Cancel Item
            </button>
            <% } %>
          </div>

          <!-- Return Form for Individual Items -->
          <div
            id="returnForm-<%= item._id %>"
            class="return-form"
            style="display: none"
          >
            <textarea
              id="returnReason-<%= item._id %>"
              rows="3"
              placeholder="Please provide a reason for returning this item"
              required
            ></textarea>
            <button
              class="btn btn-warning"
              onclick="submitItemReturn('<%= order._id %>', '<%= item._id %>')"
            >
              Submit Return Request
            </button>
            <button
              class="btn"
              onclick="hideReturnForm('<%= item._id %>')"
              style="
                background-color: #6b7280;
                color: white;
                margin-left: 0.5rem;
              "
            >
              Cancel
            </button>
          </div>

          <% if (item.status === 'Cancelled' && item.cancelledAt) { %>
          <p
            style="
              font-size: 0.75rem;
              color: var(--text-secondary);
              margin-top: 0.5rem;
            "
          >
            Cancelled on <%= item.cancelledAt.toLocaleDateString() %>
          </p>
          <% } %> <% if (item.returnReason) { %>
          <p
            style="
              font-size: 0.75rem;
              color: var(--text-secondary);
              margin-top: 0.5rem;
            "
          >
            Return Reason: <%= item.returnReason %>
          </p>
          <% } %>
        </div>
      </div>
      <% }) %>
    </div>

    <div class="order-summary">
      <div class="summary-row">
        <span>Subtotal</span>
        <span>â‚¹<%= order.totalPrice.toFixed(2) %></span>
      </div>
      <% if (order.discount > 0) { %>
      <div class="summary-row">
        <span>Discount</span>
        <span>-â‚¹<%= order.discount.toFixed(2) %></span>
      </div>
      <% } %>
      <div class="summary-row total">
        <span>Total</span>
        <span>â‚¹<%= order.finalAmount.toFixed(2) %></span>
      </div>
    </div>

    <!-- Bulk Actions for Entire Order -->
    <div class="bulk-actions">
      <% if (order.status === 'Delivered') { %>
      <button class="btn btn-warning" onclick="showBulkReturnForm()">
        Return Entire Order
      </button>
      <% } else if (order.status !== 'Cancelled' && order.status !== 'Returned'
      && order.status !== 'Partially Cancelled') { %>
      <button class="btn btn-danger" onclick="confirmCancelOrder()">
        Cancel Entire Order
      </button>
      <% } %> <% if (order.status === 'Payment Pending') { %>
      <form
        action="/continue-payment/<%= order._id %>"
        method="POST"
        style="display: inline"
      >
        <button
          type="submit"
          class="btn"
          style="background-color: var(--warning-color); color: white"
        >
          Continue Payment
        </button>
      </form>
      <% } %>

      <a
        href="/download-invoice/<%= order._id %>"
        class="btn"
        style="background-color: var(--primary-color); color: white"
      >
        Download Invoice
      </a>
    </div>

    <!-- Bulk Return Form -->
    <div
      id="bulkReturnForm"
      class="return-form"
      style="display: none; margin: 1.5rem"
    >
      <h4>Return Entire Order</h4>
      <textarea
        id="bulkReturnReason"
        rows="3"
        placeholder="Please provide a reason for returning the entire order"
        required
      ></textarea>
      <button class="btn btn-warning" onclick="submitBulkReturn()">
        Submit Return Request
      </button>
      <button
        class="btn"
        onclick="hideBulkReturnForm()"
        style="background-color: #6b7280; color: white; margin-left: 0.5rem"
      >
        Cancel
      </button>
    </div>

    <div class="shipping-address">
      <h3>Shipping Address</h3>
      <div class="address-details">
        <p><strong><%= order.address.name %></strong></p>
        <p><%= order.address.addressType %></p>
        <p><%= order.address.city %>, <%= order.address.state %></p>
        <p><%= order.address.pincode %></p>
        <p>Phone: <%= order.address.phone %></p>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  // Individual Item Actions
  function confirmCancelItem(orderId, itemId) {
    Swal.fire({
      title: "Cancel This Item?",
      text: "This action cannot be undone!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#e53e3e",
      cancelButtonColor: "#6b7280",
      confirmButtonText: "Yes, cancel item!",
      cancelButtonText: "Keep item",
    }).then((result) => {
      if (result.isConfirmed) {
        fetch(`/orders/${orderId}/items/${itemId}/cancel`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              Swal.fire({
                title: "Cancelled!",
                text: `Item cancelled successfully. Refund of â‚¹${data.refundAmount} has been added to your wallet.`,
                icon: "success",
              }).then(() => {
                window.location.reload();
              });
            } else {
              Swal.fire("Error!", data.message, "error");
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            Swal.fire(
              "Error!",
              "Something went wrong. Please try again.",
              "error"
            );
          });
      }
    });
  }

  function showReturnForm(orderId, itemId) {
    const form = document.getElementById(`returnForm-${itemId}`);
    form.style.display = form.style.display === "none" ? "block" : "none";
  }

  function hideReturnForm(itemId) {
    document.getElementById(`returnForm-${itemId}`).style.display = "none";
  }

  function submitItemReturn(orderId, itemId) {
    const returnReason = document
      .getElementById(`returnReason-${itemId}`)
      .value.trim();

    if (!returnReason) {
      Swal.fire("Error!", "Please provide a reason for the return.", "error");
      return;
    }

    fetch(`/orders/${orderId}/items/${itemId}/return`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ returnReason: returnReason }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          Swal.fire({
            title: "Return Requested!",
            text: data.message,
            icon: "success",
          }).then(() => {
            window.location.reload();
          });
        } else {
          Swal.fire("Error!", data.message, "error");
        }
      })
      .catch((error) => {
        console.error("Error:", error);
        Swal.fire("Error!", "Something went wrong. Please try again.", "error");
      });
  }

  function confirmCancelOrder() {
    Swal.fire({
      title: "Cancel Entire Order?",
      text: "This will cancel all items in this order!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#e53e3e",
      cancelButtonColor: "#6b7280",
      confirmButtonText: "Yes, cancel order!",
      cancelButtonText: "Keep order",
    }).then((result) => {
      if (result.isConfirmed) {
        const form = document.createElement("form");
        form.method = "POST";
        form.action = `/orders/<%= order._id %>/cancel`;
        document.body.appendChild(form);
        form.submit();
      }
    });
  }

  function showBulkReturnForm() {
    const form = document.getElementById("bulkReturnForm");
    form.style.display = form.style.display === "none" ? "block" : "none";
  }

  function hideBulkReturnForm() {
    document.getElementById("bulkReturnForm").style.display = "none";
  }

  function submitBulkReturn() {
    const returnReason = document
      .getElementById("bulkReturnReason")
      .value.trim();

    if (!returnReason) {
      Swal.fire("Error!", "Please provide a reason for the return.", "error");
      return;
    }

    fetch(`/orders/<%= order._id %>/return`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ returnReason: returnReason }),
    })
      .then((response) => {
        if (response.ok) {
          Swal.fire({
            title: "Return Requested!",
            text: "Your return request has been submitted successfully.",
            icon: "success",
          }).then(() => {
            window.location.reload();
          });
        } else {
          throw new Error("Network response was not ok");
        }
      })
      .catch((error) => {
        console.error("Error:", error);
        Swal.fire("Error!", "Something went wrong. Please try again.", "error");
      });
  }
</script>

<%-include("../../views/partials/user/footer") %>
